// <auto-generated> to shut up linter
using ArcCreate.Gameplay.Data;
using Cysharp.Threading.Tasks;
using UnityEngine;

namespace ArcCreate.Gameplay.Skin
{
    [CreateAssetMenu(fileName = "GamemodeNoteSkin", menuName = "Skin Option/NoteGamemode/Joycon")]
    public class TouchNoteSkinOption : GamemodeNoteSkinOption
    {
        [SerializeField] private Sprite tapSkin;
        [SerializeField] private Sprite holdSkin;
        [SerializeField] private Sprite holdHighlightSkin;
        public Material ArcTapSkin;
        [SerializeField] private Sprite arcCapSprite;

        public ExternalSprite TapSkin { get; private set; }
        public ExternalSprite HoldSkin { get; private set; }
        public ExternalSprite HoldHighlightSkin { get; private set; }
        public ExternalSprite ArcCapSprite { get; private set; }
        public ExternalTexture ArcTapSkinTexture { get; private set; }

        public override (Mesh mesh, Material material) GetArcTapSkin(ArcTap note)
            => note.Sfx == "none" ? (ArcTapMesh, ArcTapSkin) : (ArcTapSfxMesh, ArcTapSfxSkin);

        public override (Sprite normal, Sprite highlight) GetHoldSkin(Hold note)
            => (HoldSkin.Value, HoldHighlightSkin.Value);

        public override Sprite GetTapSkin(Tap note)
            => TapSkin.Value;

        public override Sprite GetArcCapSprite(Arc arc)
            => ArcCapSprite.Value;

        internal override void RegisterExternalSkin()
        {
            base.RegisterExternalSkin();
            string subdir = System.IO.Path.Combine("Note", "Touch");
            TapSkin = new ExternalSprite(tapSkin, subdir);
            HoldSkin = new ExternalSprite(holdSkin, subdir);
            HoldHighlightSkin = new ExternalSprite(holdHighlightSkin, subdir);
            ArcCapSprite = new ExternalSprite(arcCapSprite, subdir);
            ArcTapSkinTexture = new ExternalTexture(ArcTapSkin.mainTexture, subdir);
        }

        internal override async UniTask LoadExternalSkin()
        {
            await base.LoadExternalSkin();
            await TapSkin.Load();
            await HoldSkin.Load();
            await HoldHighlightSkin.Load();
            await ArcCapSprite.Load();
            await ArcTapSkinTexture.Load();

            ArcTapSkin.mainTexture = ArcTapSkinTexture.Value;
        }

        internal override void UnloadExternalSkin()
        {
            base.UnloadExternalSkin();
            TapSkin.Unload();
            HoldSkin.Unload();
            HoldHighlightSkin.Unload();
            ArcCapSprite.Unload();
            ArcTapSkinTexture.Unload();

            ArcTapSkin.mainTexture = ArcTapSkinTexture.Value;
        }
    }
}