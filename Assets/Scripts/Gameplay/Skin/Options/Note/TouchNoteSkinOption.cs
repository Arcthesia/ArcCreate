// <auto-generated> to shut up linter
using ArcCreate.Gameplay.Data;
using ArcCreate.Utility.ExternalAssets;
using Cysharp.Threading.Tasks;
using UnityEngine;

namespace ArcCreate.Gameplay.Skin
{
    [CreateAssetMenu(fileName = "GamemodeNoteSkin", menuName = "Skin Option/NoteGamemode/Joycon")]
    public class TouchNoteSkinOption : GamemodeNoteSkinOption
    {
        [SerializeField] private Texture tapSkin;
        [SerializeField] private Texture holdSkin;
        [SerializeField] private Texture holdHighlightSkin;
        [SerializeField] private Texture arcTapSkin;
        [SerializeField] private Texture arcCapSprite;

        public ExternalTexture TapSkin { get; private set; }
        public ExternalTexture HoldSkin { get; private set; }
        public ExternalTexture HoldHighlightSkin { get; private set; }
        public ExternalTexture ArcCapSprite { get; private set; }
        public ExternalTexture ArcTapSkinTexture { get; private set; }

        public override Texture GetArcTapSkin(ArcTap note)
            => (note.Sfx == "none" || string.IsNullOrEmpty(note.Sfx)) ?
               ArcTapSkinTexture.Value :
               ArcTapSfxTexture.Value;

        public override (Texture normal, Texture highlight) GetHoldSkin(Hold note)
            => (HoldSkin.Value, HoldHighlightSkin.Value);

        public override (Texture texture, Color connectionLineColor) GetTapSkin(Tap note)
            => (TapSkin.Value, ConnectionLineColor);

        public override Texture GetArcCapSprite(Arc arc)
            => ArcCapSprite.Value;

        internal override void RegisterExternalSkin()
        {
            base.RegisterExternalSkin();

            string subdir = System.IO.Path.Combine("Note", "Touch");
            TapSkin = new ExternalTexture(tapSkin, subdir);
            HoldSkin = new ExternalTexture(holdSkin, subdir);
            HoldHighlightSkin = new ExternalTexture(holdHighlightSkin, subdir);
            ArcCapSprite = new ExternalTexture(arcCapSprite, subdir);
            ArcTapSkinTexture = new ExternalTexture(arcTapSkin, subdir);
        }

        internal override async UniTask LoadExternalSkin()
        {
            await base.LoadExternalSkin();
            await TapSkin.Load();
            await HoldSkin.Load();
            await HoldHighlightSkin.Load();
            await ArcCapSprite.Load();
            await ArcTapSkinTexture.Load();
        }

        internal override void UnloadExternalSkin()
        {
            base.UnloadExternalSkin();
            TapSkin.Unload();
            HoldSkin.Unload();
            HoldHighlightSkin.Unload();
            ArcCapSprite.Unload();
            ArcTapSkinTexture.Unload();
        }
    }
}