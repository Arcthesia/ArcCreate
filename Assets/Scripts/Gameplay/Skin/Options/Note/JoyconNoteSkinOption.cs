// <auto-generated> to shut up linter
using ArcCreate.Gameplay.Data;
using ArcCreate.Utility.ExternalAssets;
using Cysharp.Threading.Tasks;
using UnityEngine;

namespace ArcCreate.Gameplay.Skin
{
    [CreateAssetMenu(fileName = "GamemodeNoteSkin", menuName = "Skin Option/NoteGamemode/Joycon")]
    public class JoyconNoteSkinOption : GamemodeNoteSkinOption
    {
        [SerializeField] private Texture tapSkinLeft;
        [SerializeField] private Texture tapSkinRight;
        [SerializeField] private Texture holdSkinLeft;
        [SerializeField] private Texture holdSkinRight;
        [SerializeField] private Texture holdHighlightSkinLeft;
        [SerializeField] private Texture holdHighlightSkinRight;
        [SerializeField] private Texture[] arcCapSprites;
        [SerializeField] private Texture arcTapSkinLeft;
        [SerializeField] private Texture arcTapSkinMiddle;
        [SerializeField] private Texture arcTapSkinRight;

        public ExternalTexture TapSkinLeft { get; private set; }
        public ExternalTexture TapSkinRight { get; private set; }
        public ExternalTexture HoldSkinLeft { get; private set; }
        public ExternalTexture HoldSkinRight { get; private set; }
        public ExternalTexture HoldHighlightSkinLeft { get; private set; }
        public ExternalTexture HoldHighlightSkinRight { get; private set; }
        public ExternalTexture[] ArcCapSprites { get; private set; }
        public ExternalTexture ArcTapSkinLeftTexture { get; private set; }
        public ExternalTexture ArcTapSkinMiddleTexture { get; private set; }
        public ExternalTexture ArcTapSkinRightTexture { get; private set; }

        public override Texture GetArcTapSkin(ArcTap note)
        {
            if (note.Sfx != "none" && !string.IsNullOrEmpty(note.Sfx))
            {
                return ArcTapSfxTexture.Value;
            }

            if (Mathf.Abs(note.WorldX) <= Values.ArcTapMiddleWorldXRange)
            {
                return ArcTapSkinMiddleTexture.Value;
            }

            if (note.WorldX > 0f)
            {
                return ArcTapSkinLeftTexture.Value;
            }

            return ArcTapSkinRightTexture.Value;
        }

        public override (Texture normal, Texture highlight) GetHoldSkin(Hold note)
            => (note.Lane <= 2) ? (HoldSkinLeft.Value, HoldHighlightSkinLeft.Value) : (HoldSkinRight.Value, HoldHighlightSkinRight.Value);

        public override (Texture texture, Color connectionLineColor) GetTapSkin(Tap note)
            => ((note.Lane <= 2) ? TapSkinLeft.Value : TapSkinRight.Value, ConnectionLineColor);

        public override Texture GetArcCapSprite(Arc arc)
        {
            if (arc.Color < 0 || arc.Color > ArcCapSprites.Length)
            {
                return ArcCapSprites[ArcCapSprites.Length - 1].Value;
            }
            return ArcCapSprites[arc.Color].Value;
        }

        internal override void RegisterExternalSkin()
        {
            base.RegisterExternalSkin();

            string subdir = System.IO.Path.Combine("Note", "Joycon");
            TapSkinLeft = new ExternalTexture(tapSkinLeft, subdir);
            TapSkinRight = new ExternalTexture(tapSkinRight, subdir);
            HoldSkinLeft = new ExternalTexture(holdSkinLeft, subdir);
            HoldSkinRight = new ExternalTexture(holdSkinRight, subdir);
            HoldHighlightSkinLeft = new ExternalTexture(holdHighlightSkinLeft, subdir);
            HoldHighlightSkinRight = new ExternalTexture(holdHighlightSkinRight, subdir);
            ArcCapSprites = new ExternalTexture[arcCapSprites.Length];
            for (int i = 0; i < ArcCapSprites.Length; i++)
            {
                ArcCapSprites[i] = new ExternalTexture(arcCapSprites[i], subdir);
            }

            ArcTapSkinLeftTexture = new ExternalTexture(arcTapSkinLeft, subdir);
            ArcTapSkinMiddleTexture = new ExternalTexture(arcTapSkinMiddle, subdir);
            ArcTapSkinRightTexture = new ExternalTexture(arcTapSkinRight, subdir);
        }

        internal override async UniTask LoadExternalSkin()
        {
            await base.LoadExternalSkin();
            await TapSkinLeft.Load();
            await TapSkinRight.Load();
            await HoldSkinLeft.Load();
            await HoldSkinRight.Load();
            await HoldHighlightSkinLeft.Load();
            await HoldHighlightSkinRight.Load();

            for (int i = 0; i < ArcCapSprites.Length; i++)
            {
                await ArcCapSprites[i].Load();
            }

            await ArcTapSkinLeftTexture.Load();
            await ArcTapSkinMiddleTexture.Load();
            await ArcTapSkinRightTexture.Load();
        }

        internal override void UnloadExternalSkin()
        {
            base.UnloadExternalSkin();
            TapSkinLeft.Unload();
            TapSkinRight.Unload();
            HoldSkinLeft.Unload();
            HoldSkinRight.Unload();
            HoldHighlightSkinLeft.Unload();
            HoldHighlightSkinRight.Unload();

            for (int i = 0; i < ArcCapSprites.Length; i++)
            {
                ArcCapSprites[i].Unload();
            }

            ArcTapSkinLeftTexture.Unload();
            ArcTapSkinMiddleTexture.Unload();
            ArcTapSkinRightTexture.Unload();
        }
    }
}